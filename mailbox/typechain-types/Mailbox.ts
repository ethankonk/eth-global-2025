/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export interface MailboxInterface extends Interface {
  getFunction(nameOrSignature: 'send'): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'Message'): EventFragment;

  encodeFunctionData(functionFragment: 'send', values: [AddressLike, BytesLike, string]): string;

  decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result;
}

export namespace MessageEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    payloadHash: BytesLike,
    cid: string,
  ];
  export type OutputTuple = [from: string, to: string, payloadHash: string, cid: string];
  export interface OutputObject {
    from: string;
    to: string;
    payloadHash: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Mailbox extends BaseContract {
  connect(runner?: ContractRunner | null): Mailbox;
  waitForDeployment(): Promise<this>;

  interface: MailboxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  send: TypedContractMethod<
    [to: AddressLike, payloadHash: BytesLike, cid: string],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'send',
  ): TypedContractMethod<
    [to: AddressLike, payloadHash: BytesLike, cid: string],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'Message',
  ): TypedContractEvent<
    MessageEvent.InputTuple,
    MessageEvent.OutputTuple,
    MessageEvent.OutputObject
  >;

  filters: {
    'Message(address,address,bytes32,string)': TypedContractEvent<
      MessageEvent.InputTuple,
      MessageEvent.OutputTuple,
      MessageEvent.OutputObject
    >;
    Message: TypedContractEvent<
      MessageEvent.InputTuple,
      MessageEvent.OutputTuple,
      MessageEvent.OutputObject
    >;
  };
}
