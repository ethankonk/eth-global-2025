/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MailboxDynamicInterface extends Interface {
  getFunction(nameOrSignature: "sendJson" | "sendKV"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessageJSON" | "MessageKV"): EventFragment;

  encodeFunctionData(
    functionFragment: "sendJson",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendKV",
    values: [AddressLike, string, string[], string[]]
  ): string;

  decodeFunctionResult(functionFragment: "sendJson", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendKV", data: BytesLike): Result;
}

export namespace MessageJSONEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    schema: string,
    json: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    schema: string,
    json: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    schema: string;
    json: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageKVEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    schema: string,
    fieldKeys: string[],
    fieldValues: string[]
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    schema: string,
    fieldKeys: string[],
    fieldValues: string[]
  ];
  export interface OutputObject {
    from: string;
    to: string;
    schema: string;
    fieldKeys: string[];
    fieldValues: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MailboxDynamic extends BaseContract {
  connect(runner?: ContractRunner | null): MailboxDynamic;
  waitForDeployment(): Promise<this>;

  interface: MailboxDynamicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  sendJson: TypedContractMethod<
    [to: AddressLike, schema: string, json: string],
    [void],
    "nonpayable"
  >;

  sendKV: TypedContractMethod<
    [
      to: AddressLike,
      schema: string,
      fieldKeys: string[],
      fieldValues: string[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "sendJson"
  ): TypedContractMethod<
    [to: AddressLike, schema: string, json: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendKV"
  ): TypedContractMethod<
    [
      to: AddressLike,
      schema: string,
      fieldKeys: string[],
      fieldValues: string[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MessageJSON"
  ): TypedContractEvent<
    MessageJSONEvent.InputTuple,
    MessageJSONEvent.OutputTuple,
    MessageJSONEvent.OutputObject
  >;
  getEvent(
    key: "MessageKV"
  ): TypedContractEvent<
    MessageKVEvent.InputTuple,
    MessageKVEvent.OutputTuple,
    MessageKVEvent.OutputObject
  >;

  filters: {
    "MessageJSON(address,address,string,string)": TypedContractEvent<
      MessageJSONEvent.InputTuple,
      MessageJSONEvent.OutputTuple,
      MessageJSONEvent.OutputObject
    >;
    MessageJSON: TypedContractEvent<
      MessageJSONEvent.InputTuple,
      MessageJSONEvent.OutputTuple,
      MessageJSONEvent.OutputObject
    >;

    "MessageKV(address,address,string,string[],string[])": TypedContractEvent<
      MessageKVEvent.InputTuple,
      MessageKVEvent.OutputTuple,
      MessageKVEvent.OutputObject
    >;
    MessageKV: TypedContractEvent<
      MessageKVEvent.InputTuple,
      MessageKVEvent.OutputTuple,
      MessageKVEvent.OutputObject
    >;
  };
}
